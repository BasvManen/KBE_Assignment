from analysis.spoiler_files import Spoiler
from parapy.core import *
from parapy.geom import *
from parapy.lib.xfoil import *

from kbeutils.geom.curve import airfoil_points_in_xy_plane
import matplotlib.pyplot as plt


class XFoilAnalysis(GeomBase):

    spoiler = Input(in_tree=True)
    fraction = Input(0.3)
    velocity = Input(25)
    density = Input(1.225)

    @Part
    def cutting_plane(self):
        return Plane(Point(0, self.fraction*self.spoiler.spoiler_span/2, 0),
                     normal=VY)

    @Part
    def analysis_section(self):
        return IntersectedShapes(shape_in=self.spoiler.main_plate.surface,
                                 tool=self.cutting_plane)

    @Attribute
    def reynolds_number(self):
        return (self.density*self.velocity*self.spoiler.spoiler_chord/1000) \
               / 1.47e-5

    @Attribute
    def analysis_points(self):
        return airfoil_points_in_xy_plane(curve_in=
                                          self.analysis_section.edges[0],
                                          n_points=200)

    @Attribute
    def xfoil_analysis(self):
        return run_xfoil(self.analysis_points,
                         self.reynolds_number,
                         (0, self.spoiler.spoiler_angle, 1),
                         norm=True,  # normalize airfoil if necessary
                         pane=True,  # smooth out the airfoil
                         cleanup=True)  # remove files generated by xfoil

    @action(label="Plot spoiler angle vs downforce")
    def cl_alpha_plot(self):
        if self.xfoil_analysis == []:
            return print("Section is stalled!")
        else:
            columns = self.xfoil_analysis
            rows = tuple(zip(*columns))
            plt.plot(rows[0], rows[1])
            plt.xlabel("Spoiler angle")
            plt.ylabel("Downforce coefficient")
            plt.show()


def xfoil_main(frac, geom, cond):
    from parapy.gui import display

    spl = Spoiler(label="Spoiler",
                  mid_airfoil=geom[0],
                  tip_airfoil=geom[1],
                  spoiler_span=geom[2],
                  spoiler_chord=geom[3],
                  spoiler_angle=geom[4],
                  strut_airfoil_shape=geom[5],
                  strut_lat_location=geom[6],
                  strut_height=geom[7],
                  strut_chord_fraction=geom[8],
                  strut_thickness=geom[9],
                  strut_sweep=geom[10],
                  strut_cant=geom[11],
                  endplate_present=geom[12],
                  endplate_thickness=geom[13],
                  endplate_sweep=geom[14],
                  endplate_cant=geom[15])

    analysis = XFoilAnalysis(spoiler=spl,
                             fraction=frac,
                             velocity=cond[0],
                             density=cond[2])

    display(analysis)
