from analysis.spoiler_files import Spoiler
from parapy.core import *
from parapy.geom import *
from parapy.lib.xfoil import *

from kbeutils.geom.curve import airfoil_points_in_xy_plane
import matplotlib.pyplot as plt
import numpy as np


class XFoilAnalysis(GeomBase):

    spoiler = Input(in_tree=True)
    fraction = Input(0.3)
    velocity = Input(25)
    density = Input(1.225)
    angle_of_attack = Input()

    @Part
    def cutting_plane(self):
        return Plane(Point(0, self.fraction*self.spoiler.spoiler_span/2, 0),
                     normal=VY)

    @Part
    def analysis_section(self):
        return IntersectedShapes(shape_in=self.spoiler.main_plate[0].surface,
                                 tool=self.cutting_plane)

    @Attribute
    def reynolds_number(self):
        return ((self.density*self.velocity*self.spoiler.spoiler_chord/1000)
                / 1.47e-5)

    @Attribute
    def analysis_points(self):
        return airfoil_points_in_xy_plane(curve_in=
                                          self.analysis_section.edges[0],
                                          n_points=200)

    @Attribute
    def xfoil_analysis(self):
        return run_xfoil(self.analysis_points,
                         self.reynolds_number,
                         (self.angle_of_attack,
                          self.angle_of_attack + 10, 1),
                         norm=True,  # normalize airfoil if necessary
                         pane=True,  # smooth out the airfoil
                         cleanup=True,  # remove files generated by xfoil
                         ncrit=None)

    @action(label="Plot spoiler angle vs downforce")
    def cl_alpha_plot(self):
        if self.xfoil_analysis == []:
            return print("Section is stalled!")
        else:
            columns = self.xfoil_analysis
            rows = tuple(zip(*columns))
            plt.plot(np.array(rows[0])-self.angle_of_attack, rows[1], 'k')
            plt.xlabel("Spoiler angle")
            plt.ylabel("Local downforce coefficient")
            plt.title("Local downforce coefficient versus spoiler angle")
            plt.show()

            max_cl = max(rows[1])
            max_angle = rows[0][rows[1].index(max_cl)] - self.angle_of_attack
            print("-----------------------------------------------")
            print("Maximum downforce coefficient is " + str(max_cl) + " at a")
            print("spoiler angle of " + str(np.round(max_angle, 0))
                  + " degrees.")
            print("-----------------------------------------------")

